plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id "androidx.navigation.safeargs.kotlin"
    id 'com.google.firebase.crashlytics'
}

apply from: "$rootDir/gradle/helpers/common-methods.gradle"

Properties semver = new Properties()
semver.load(new FileInputStream(file("semver.properties")))

def buildTimeMillis = System.currentTimeMillis()
def buildVersionCode = computeVersionCode(semver['major'], semver['minor'], semver['patch'], semver['build'])
def buildVersionName = computeVersionName(semver['major'], semver['minor'], semver['patch'])
def buildTime = computeBuildTimeFormatted(buildTimeMillis)
def buildRevision = computeRevision()

ant.propertyfile(file: "version.properties") {
    entry(key: "version", value: buildVersionName)
    entry(key: "versionCode", value: buildVersionCode)
    entry(key: "rev", value: buildRevision)
    entry(key: "buildTime", value: buildTime)
}

android {
    compileSdkVersion versions.compileSdk

    defaultConfig {
        applicationId "com.tinashe.christInSong"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode buildVersionCode
        versionName buildVersionName
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    Properties keyProps = new Properties()
    keyProps.load(new FileInputStream(file("../app/keystore.properties")))

    signingConfigs {
        release {
            storeFile file(keyProps['release.keystore'])
            storePassword keyProps['release.keystore.password']
            keyAlias keyProps['key.alias']
            keyPassword keyProps['key.password']
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            manifestPlaceholders = [enableReporting: "true"]
        }
        debug {
            manifestPlaceholders = [enableReporting: "false"]
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
        freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.FlowPreview"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    // Androidx
    implementation "androidx.core:core-ktx:${versions.ktx}"
    implementation "androidx.appcompat:appcompat:${versions.appcompat}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.const_layout}"
    implementation "androidx.recyclerview:recyclerview:${versions.recyclerview}"
    implementation "androidx.lifecycle:lifecycle-extensions:${versions.lifecycle_ext}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${versions.lifecycle}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.room:room-runtime:${versions.room}"
    implementation "androidx.room:room-ktx:${versions.room}"
    kapt "androidx.room:room-compiler:${versions.room}"
    implementation "androidx.startup:startup-runtime:${versions.startup}"
    implementation "androidx.preference:preference-ktx:${versions.preference}"
    implementation "androidx.browser:browser:${versions.browser}"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${versions.coroutines}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-play-services:${versions.coroutines}"

    // Dagger
    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    kapt "com.google.dagger:hilt-android-compiler:${versions.hilt}"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:${versions.firebase_bom}")
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-config-ktx'

    implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    implementation "com.jakewharton.timber:timber:${versions.timber}"
    implementation "com.android.billingclient:billing-ktx:${versions.billing}"
    implementation "com.github.wordpress-mobile.WordPress-Aztec-Android:aztec:${versions.aztec}"
    implementation "uk.co.samuelwall:material-tap-target-prompt:${versions.material_tap}"

    testImplementation "junit:junit:$versions.junit"
    testImplementation "io.mockk:mockk:${versions.mockk}"
    testImplementation "androidx.arch.core:core-testing:$versions.androidx_testing"
    testImplementation "org.amshove.kluent:kluent-android:$versions.kluent"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:${versions.coroutines}"
    testImplementation "androidx.test.ext:junit:$versions.androidx_junit"
    testImplementation "org.robolectric:robolectric:$versions.robolectric"
    androidTestImplementation "androidx.test.ext:junit:$versions.androidx_junit"
    androidTestImplementation "androidx.test.espresso:espresso-core:$versions.espresso"

}
